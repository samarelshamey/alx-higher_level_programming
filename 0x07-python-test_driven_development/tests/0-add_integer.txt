`0-add_integer` module
----------------------

using add_integer
----------------

Import function from module:

	>>> add_integer = __import__('0-add_integer').add_integer

Test one float:

	>>> add_integer(11.9)
	109

Test one integer:

	>>> add_integer(1)
	99

Test zero:

	>>> add_integer(0)
	98

Test negative float:

	>>> add_integer(-11.9)
	87

Test negative integer:

	>>> add_integer(-2)
	96

Test integers:

	>>> add_integer(5, 10)
	15

Test two large integers:

	>>> add_integer(123456, 123456)
	246912

Test two floats:

	>>> add_integer(1.5, 1.5)
	2

Test two large floats:

	>>> add_integer(123456.5, 123456.5)
	246912

Test negative and postive integers:

	>>> add_integer(-10, 5)
	-5

Test postive and negative integers:

	>>> add_integer(10, -5)
	5

Test float and integer:

	>>> add_integer(12345.2, 3000)
	15345

Test integer and float:

	>>> add_integer(123460, 4786.22213)
	128246

Test invalid first arg:

	>>> add_integer("wrong", 0)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Test invalid second arg:

	>>> add_integer(0, None)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Test both args are invalid:

	>>> add_integer([], None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Test two string:

	>>> add_integer("wrong", "arg")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Test inf:

	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Test nan:

	>>> add_integer(0, float('nan'))
	Traceback (most recent call last):
        ...
	ValueError: cannot convert float NaN to integer

Test overflow:

	>>> add_integer(float('inf'), 10)
	Traceback (most recent call last):
        ...
	OverflowError: cannot convert float infinity to integer
