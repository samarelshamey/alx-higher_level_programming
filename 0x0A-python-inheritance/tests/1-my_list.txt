1-my_list module
-------------------

using 1-my_list
------------------

Import function from module:
	>>> MyList = __import__('1-my_list').MyList

Class Type test:
	>>> lst = MyList()
	>>> type(lst) == MyList
	True

Instance test:
	>>> lst = MyList()
	>>> isinstance(lst, list)
	True

Method test:
	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Empty list test:
	>>> lst = MyList()
	>>> lst.print_sorted()
	[]

basic list test:
	>>> lst = MyList([1, 4, 3, 8, 2])
        >>> lst.print_sorted()
	[1, 2, 3, 4, 8]

Method test with no args:
	>>> lst.__class__.print_sorted()
    	Traceback (most recent call last):
    	TypeError: print_sorted() missing 1 required positional argument: 'self'

Method test with one arg:
	>>> lst.__class__.print_sorted([1, 5, 8], 2)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

Method test with two args:
	>>> lst.__class__.print_sorted([1, 3, 7], 2, 5)
        Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 3 were given

List with negative elments:
	>>> lst = MyList([-54, -43, -90, 0, -1, -3])
	>>> lst.print_sorted()
	[-90, -54, -43, -3, -1, 0]

Test ordered list:
	>>> lst = MyList([1, 3, 6, 20, 50, 100])
	>>> lst.print_sorted()
	[1, 3, 6, 20, 50, 100]

Test unchanged list:
	>>> lst = MyList([1, 3, 6, 30, 100, 5, 7])
	>>> lst.print_sorted()
	[1, 3, 5, 6, 7, 30, 100]
	>>> lst
	[1, 3, 6, 30, 100, 5, 7]

Test append:
	>>> lst = MyList()
	>>> lst.append(70)
	>>> lst
	[70]
